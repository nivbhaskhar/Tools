1) Create a new directory called missing under /tmp.

mkdir /tmp/missing

2) Look up the touch program. The man program is your friend.

The touch utility sets the modification and access times of files.  If any file does not exist, it is created with default permissions.

3) Use touch to create a new file called semester in missing.

touch semester


4) Write the following into that file, one line at a time:
#!/bin/sh
curl --head --silent https://missing.csail.mit.edu

The first line might be tricky to get working. It’s helpful to know that # starts a comment in Bash, and ! has a special meaning even within double-quoted (") strings. Bash treats single-quoted strings (') differently: they will do the trick in this case. See the Bash quoting manual page for more information.


echo '#!/bin/sh' >semester
ideallaedi:tmp ideallaedi$ echo 'curl --head --silent https://missing.csail.mit.edu' >>semester


5) Try to execute the file, i.e. type the path to the script (./semester) into your shell and press enter. Understand why it doesn’t work by consulting the output of ls (hint: look at the permission bits of the file).

ls -l 
permissions: -rw-r--r--  

6) Run the command by explicitly starting the sh interpreter, and giving it the file semester as the first argument, i.e. sh semester. Why does this work, while ./semester didn’t?

sh doesn't need an executable file as input, only needs file to be readable


7) Look up the chmod program (e.g. use man chmod).

The chmod utility modifies the file mode bits of the listed files as specified by the mode operand

8) Use chmod to make it possible to run the command ./semester rather than having to type sh semester. 

chmod u+x semester


9) How does your shell know that the file is supposed to be interpreted using sh? See wiki page on the shebang line for more information.

File 
------
#!/bin/sh
blah...

#! is called she-bang

When running an executable file, #!***  => *** is the command (/bin/sh)
UNIX kernel gives what follows (blah..) as an input to **** (/bin/sh) command


10) Use | and > to write the “last modified” date output by semester into a file called last-modified.txt in your home directory.

last modified date
------------------
date -r semester

date -r semester|cat >~/last-modified.txt





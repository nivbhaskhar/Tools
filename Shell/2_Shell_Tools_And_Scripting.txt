2) Shell Tools and Scripting 

Reference: https://missing.csail.mit.edu/2020/shell-tools/

Command
-- Terminal output
** Description of what the command does/notes


Assigning and accessing variables
---------------------------------

my_variable=2
echo "$my_variable"

-- 2

** my_variable = 2 interpreted as run command my_variable with argument 2
So don't have spaces while assigning variables!


value=2
my_variable=value
echo "$my_variable"

-- value

** To access variable's value, use $...


Defining and calling functions
------------------------------

my_function () {

echo "$2"

}


my_function first_arg second_arg

-- second_arg



** $0 refers to name of script (?? in interactive mode, it is "-bash")
** $1 refers to first argument of script/function
** $i for 1<=i<=9 refers to i-th argument of script/function
** $@ refers to all arguments of script/function
** $# is number of arguments of script/function
** $? refers to exit code of the previous command
[Warning - if a command exits with code 1 in a terminal, it logs you out of terminal]
[So this $? is useful only if you run the command as a script in the current terminal (so the actual command runs in a different terminal) and then call $? in the current terminal to get exit code of the script run just before]
** !! is entire last command including arguments
** $_ is last argument of last command (Esc . also yields same if in interactive mode)


Output, errors, return codes
---------------------------

STDOUT - common way for functions to return outputs
STDERR - common way for functions to return errors
Return/Exit Code - report errors which are more parseable by script

Exit Code = 0 if all OK, else non-zero
true : Exit Code 0
false: Exit Code 1

command  > output.txt 2> stderr.ext 
---writed STDOUT to output.txt and STDERR to stderr.txt

$? 
--returns exit code of previous command

OR and AND
-----------
command 1 || command 2

command 1 exit code |  (Command 1 || Command 2)
0                      Command 2 will not execute
1                      Command 2 will execute 


Similarly for command 1 &&  command 2

Command and process substitution
--------------------------------

$(command)
-- executes command and substitutes output in place

foo=$(ls)
-- puts output of ls in foo variable

<(command)
--executes command and puts output in temp file and substitutes <() with that temp file name

cat <(ls)
-- equivalent to ls >tmp.txt; cat tmp.txt


Shell globbing
--------------

Wildcards 
--------- 

* will match any number of characters
? will match a character


rm foo* 
-- Will remove any file with name starting with "foo" including "foo" itself

rm foo?
-- Will remove any file with name "foo?" where ? can be any *one* character. It won't remove "foo" named files though.


Curly braces and / 
--------------------

If you have a bash command like ...... X{a,b,c}Y ...., bash will expand it to ...... XaY XbY XcY .....

diff file{1,2}.txt
-- expands to .... diff file1.txt file2.txt


touch {foo, bar}{a..c}.txt
-- expands to touch fooa.txt foob.txt fooc.txt bara.txt barb.txt barc.txt


Comparisons
------------

if [[$? -ne 0]]

More comparisons found at https://www.man7.org/linux/man-pages/man1/test.1.html


Differences between shell functions and scripts
-----------------------------------------------

Include shebang at the top of the script. For instance for python script, #!/usr/bin/env python

Functions are loaded once when their definition is read. Scripts are loaded every time they are executed. This makes functions slightly faster to load, but whenever you change them you will have to reload their definition.


Functions are executed in the current shell environment whereas scripts execute in their own process. Thus, functions can modify environment variables, e.g. change your current directory, whereas scripts can’t. Scripts will be passed by value environment variables that have been exported using export



TLDR pages (need to install from https://tldr.sh/)
----------

tldr command
-- gives you the tldr version of man page of command


Shell history
-------------

* Finding previously used commands from your bash history. (Same as doing Ctrl+R and then searching for previous commands)

history | grep command

* Start a command with a leading space => it won’t be added to shell history. 

* Can also edit .bash_history manually


Find
----

* find files that match some pattern PATTERN 

find -name '*PATTERN*' (or -iname for pattern matching to be case insensitive)


* Find all directories named src
find . -name src -type d


* Find all python files that have a folder named test in their path
find . -path '*/test/*.py' -type f


* Find all files modified in the last day
find . -mtime -1


* Find all zip files with size in range 500k to 10M
find . -size +500k -size -10M -name '*.tar.gz'


Find and exec
-------------

* Delete all files with .tmp extension
find . -name '*.tmp' -exec rm {} \;



* Find all PNG files and convert them to JPG
find . -name '*.png' -exec convert {} {}.jpg \;


Alternative to find : fd
------------------------

* find files that match some pattern PATTERN 

fd PATTERN.


grep
----

* Search for files based on file content

grep "PATTERN" filename

* For getting context around the matching line

grep -C 5
--prints 5 lines before and after the match

* For printing all lines that DON'T match the pattern

grep -v 

* Recursive match finding
grep -R 


grep -R can be improved to ignore .git folders etc. 

Grep alternatives
-----------------
ack, ag and rg. 

Examples of rg (ripgrep) usage
------------------------------
# Find all python files where requests library was used

rg -t py 'import requests'

# Find all files (including hidden files) without a shebang line

rg -u --files-without-match "^#!"

# Find all matches of foo and print the following 5 lines

rg foo -A 5

# Print statistics of matches (# of matched lines and files )

rg --stats PATTERN



